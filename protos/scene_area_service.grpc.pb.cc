// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: scene_area_service.proto

#include "scene_area_service.pb.h"
#include "scene_area_service.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace scenearea {

static const char* SceneAreaService_method_names[] = {
  "/scenearea.SceneAreaService/EnterScene",
};

std::unique_ptr< SceneAreaService::Stub> SceneAreaService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SceneAreaService::Stub> stub(new SceneAreaService::Stub(channel));
  return stub;
}

SceneAreaService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_EnterScene_(SceneAreaService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SceneAreaService::Stub::EnterScene(::grpc::ClientContext* context, const ::scenearea::EnterSceneRequest& request, ::scenearea::EnterSceneResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_EnterScene_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::scenearea::EnterSceneResponse>* SceneAreaService::Stub::AsyncEnterSceneRaw(::grpc::ClientContext* context, const ::scenearea::EnterSceneRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::scenearea::EnterSceneResponse>::Create(channel_.get(), cq, rpcmethod_EnterScene_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::scenearea::EnterSceneResponse>* SceneAreaService::Stub::PrepareAsyncEnterSceneRaw(::grpc::ClientContext* context, const ::scenearea::EnterSceneRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::scenearea::EnterSceneResponse>::Create(channel_.get(), cq, rpcmethod_EnterScene_, context, request, false);
}

SceneAreaService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SceneAreaService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SceneAreaService::Service, ::scenearea::EnterSceneRequest, ::scenearea::EnterSceneResponse>(
          std::mem_fn(&SceneAreaService::Service::EnterScene), this)));
}

SceneAreaService::Service::~Service() {
}

::grpc::Status SceneAreaService::Service::EnterScene(::grpc::ServerContext* context, const ::scenearea::EnterSceneRequest* request, ::scenearea::EnterSceneResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace scenearea

